#!/bin/bash
set -ex
TMP=$(mktemp -d)
sed 's/^/export /' /etc/os-release > /tmp/os-release
. /tmp/os-release
: ${DEB_PRE_PACKAGES_TO_INSTALL:='jq apt-transport-https ca-certificates curl ebtables ethtool keepalived open-iscsi tgt software-properties-common'}
# this one is for customization
: ${ADDITIONAL_DEB_PACKAGES_TO_INSTALL:='NIL'}
: ${DOCKER_CGROUP_DRIVER:='systemd'}

kube_major=$(echo $KUBEPKG_VERSION | cut -f1 -d'.')
kube_minor=$(echo $KUBEPKG_VERSION | cut -f2 -d'.')
export SHORT_KUBEPKG_VERSION=${kube_major}.${kube_minor}

rook_efficiency () {
# This is for rook efficiency
# https://rook.io/docs/rook/v0.9/edgefs-quickstart.html
cat <<EOF >  /etc/sysctl.d/rook.conf
net.core.rmem_default = 80331648
net.core.rmem_max = 80331648
net.core.wmem_default = 33554432
net.core.wmem_max = 50331648
vm.dirty_ratio = 10
vm.dirty_background_ratio = 5
vm.swappiness = 15
EOF
}

containerd_config () {
  echo containerd_config
  mkdir -p  /etc/containerd
  cat <<EOF >  /etc/containerd/config.toml
disabled_plugins = []
imports = []
oom_score = 0
plugin_dir = ""
required_plugins = []
root = "/var/lib/containerd"
state = "/run/containerd"
temp = ""
version = 2

[cgroup]
  path = ""

[debug]
  address = ""
  format = ""
  gid = 0
  level = ""
  uid = 0

[grpc]
  address = "/run/containerd/containerd.sock"
  gid = 0
  max_recv_message_size = 16777216
  max_send_message_size = 16777216
  tcp_address = ""
  tcp_tls_ca = ""
  tcp_tls_cert = ""
  tcp_tls_key = ""
  uid = 0

[metrics]
  address = ""
  grpc_histogram = false

[plugins]

  [plugins."io.containerd.gc.v1.scheduler"]
    deletion_threshold = 0
    mutation_threshold = 100
    pause_threshold = 0.02
    schedule_delay = "0s"
    startup_delay = "100ms"

  [plugins."io.containerd.grpc.v1.cri"]
    device_ownership_from_security_context = false
    disable_apparmor = false
    disable_cgroup = false
    disable_hugetlb_controller = true
    disable_proc_mount = false
    disable_tcp_service = true
    enable_selinux = false
    enable_tls_streaming = false
    enable_unprivileged_icmp = false
    enable_unprivileged_ports = false
    ignore_image_defined_volumes = false
    max_concurrent_downloads = 3
    max_container_log_line_size = 16384
    netns_mounts_under_state_dir = false
    restrict_oom_score_adj = false
    sandbox_image = "registry.k8s.io/pause:3.6"
    selinux_category_range = 1024
    stats_collect_period = 10
    stream_idle_timeout = "4h0m0s"
    stream_server_address = "127.0.0.1"
    stream_server_port = "0"
    systemd_cgroup = false
    tolerate_missing_hugetlb_controller = true
    unset_seccomp_profile = ""

    [plugins."io.containerd.grpc.v1.cri".cni]
      bin_dir = "/opt/cni/bin"
      conf_dir = "/etc/cni/net.d"
      conf_template = ""
      ip_pref = ""
      max_conf_num = 1

    [plugins."io.containerd.grpc.v1.cri".containerd]
      default_runtime_name = "runc"
      disable_snapshot_annotations = true
      discard_unpacked_layers = false
      ignore_rdt_not_enabled_errors = false
      no_pivot = false
      snapshotter = "overlayfs"

      [plugins."io.containerd.grpc.v1.cri".containerd.default_runtime]
        base_runtime_spec = ""
        cni_conf_dir = ""
        cni_max_conf_num = 0
        container_annotations = []
        pod_annotations = []
        privileged_without_host_devices = false
        runtime_engine = ""
        runtime_path = ""
        runtime_root = ""
        runtime_type = ""

        [plugins."io.containerd.grpc.v1.cri".containerd.default_runtime.options]

      [plugins."io.containerd.grpc.v1.cri".containerd.runtimes]

        [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc]
          base_runtime_spec = ""
          cni_conf_dir = ""
          cni_max_conf_num = 0
          container_annotations = []
          pod_annotations = []
          privileged_without_host_devices = false
          runtime_engine = ""
          runtime_path = ""
          runtime_root = ""
          runtime_type = "io.containerd.runc.v2"

          [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runc.options]
            BinaryName = ""
            CriuImagePath = ""
            CriuPath = ""
            CriuWorkPath = ""
            IoGid = 0
            IoUid = 0
            NoNewKeyring = false
            NoPivotRoot = false
            Root = ""
            ShimCgroup = ""
            SystemdCgroup = true

      [plugins."io.containerd.grpc.v1.cri".containerd.untrusted_workload_runtime]
        base_runtime_spec = ""
        cni_conf_dir = ""
        cni_max_conf_num = 0
        container_annotations = []
        pod_annotations = []
        privileged_without_host_devices = false
        runtime_engine = ""
        runtime_path = ""
        runtime_root = ""
        runtime_type = ""

        [plugins."io.containerd.grpc.v1.cri".containerd.untrusted_workload_runtime.options]

    [plugins."io.containerd.grpc.v1.cri".image_decryption]
      key_model = "node"

    [plugins."io.containerd.grpc.v1.cri".registry]
      config_path = ""

      [plugins."io.containerd.grpc.v1.cri".registry.auths]

      [plugins."io.containerd.grpc.v1.cri".registry.configs]

      [plugins."io.containerd.grpc.v1.cri".registry.headers]

      [plugins."io.containerd.grpc.v1.cri".registry.mirrors]

    [plugins."io.containerd.grpc.v1.cri".x509_key_pair_streaming]
      tls_cert_file = ""
      tls_key_file = ""

  [plugins."io.containerd.internal.v1.opt"]
    path = "/opt/containerd"

  [plugins."io.containerd.internal.v1.restart"]
    interval = "10s"

  [plugins."io.containerd.internal.v1.tracing"]
    sampling_ratio = 1.0
    service_name = "containerd"

  [plugins."io.containerd.metadata.v1.bolt"]
    content_sharing_policy = "shared"

  [plugins."io.containerd.monitor.v1.cgroups"]
    no_prometheus = false

  [plugins."io.containerd.runtime.v1.linux"]
    no_shim = false
    runtime = "runc"
    runtime_root = ""
    shim = "containerd-shim"
    shim_debug = false

  [plugins."io.containerd.runtime.v2.task"]
    platforms = ["linux/amd64"]
    sched_core = false

  [plugins."io.containerd.service.v1.diff-service"]
    default = ["walking"]

  [plugins."io.containerd.service.v1.tasks-service"]
    rdt_config_file = ""

  [plugins."io.containerd.snapshotter.v1.aufs"]
    root_path = ""

  [plugins."io.containerd.snapshotter.v1.btrfs"]
    root_path = ""

  [plugins."io.containerd.snapshotter.v1.devmapper"]
    async_remove = false
    base_image_size = ""
    discard_blocks = false
    fs_options = ""
    fs_type = ""
    pool_name = ""
    root_path = ""

  [plugins."io.containerd.snapshotter.v1.native"]
    root_path = ""

  [plugins."io.containerd.snapshotter.v1.overlayfs"]
    mount_options = []
    root_path = ""
    sync_remove = false
    upperdir_label = false

  [plugins."io.containerd.snapshotter.v1.zfs"]
    root_path = ""

  [plugins."io.containerd.tracing.processor.v1.otlp"]
    endpoint = ""
    insecure = false
    protocol = ""

[proxy_plugins]

[stream_processors]

  [stream_processors."io.containerd.ocicrypt.decoder.v1.tar"]
    accepts = ["application/vnd.oci.image.layer.v1.tar+encrypted"]
    args = ["--decryption-keys-path", "/etc/containerd/ocicrypt/keys"]
    env = ["OCICRYPT_KEYPROVIDER_CONFIG=/etc/containerd/ocicrypt/ocicrypt_keyprovider.conf"]
    path = "ctd-decoder"
    returns = "application/vnd.oci.image.layer.v1.tar"

  [stream_processors."io.containerd.ocicrypt.decoder.v1.tar.gzip"]
    accepts = ["application/vnd.oci.image.layer.v1.tar+gzip+encrypted"]
    args = ["--decryption-keys-path", "/etc/containerd/ocicrypt/keys"]
    env = ["OCICRYPT_KEYPROVIDER_CONFIG=/etc/containerd/ocicrypt/ocicrypt_keyprovider.conf"]
    path = "ctd-decoder"
    returns = "application/vnd.oci.image.layer.v1.tar+gzip"

[timeouts]
  "io.containerd.timeout.bolt.open" = "0s"
  "io.containerd.timeout.shim.cleanup" = "5s"
  "io.containerd.timeout.shim.load" = "5s"
  "io.containerd.timeout.shim.shutdown" = "3s"
  "io.containerd.timeout.task.state" = "2s"

[ttrpc]
  address = ""
  gid = 0
  uid = 0
EOF
}

preps () {
if [ $ID = 'debian' ]; then
    : ${DEB_PACKAGES_TO_INSTALL:='ceph sysstat rsync fail2ban net-tools dnsutils python3-pip vim htop iotop iftop zsh'}
elif [ $ID = 'ubuntu' ]; then
  if [ $UBUNTU_CODENAME = 'focal' ]; then
    echo 'Focal is the OS'
    : ${DEB_PACKAGES_TO_INSTALL:='ceph sysstat rsync fail2ban net-tools dnsutils python3-pip vim htop iotop iftop zsh'}
  else
    echo 'Focal is not the OS'
    : ${DEB_PACKAGES_TO_INSTALL:='ceph sysstat rsync fail2ban net-tools dnsutils python-pip  vim htop iotop iftop zsh ntp ceph-test'}
  fi
fi

cat <<EOF > $TMP/inventory
localhost ansible_connection=local

[nodes]
localhost

[primary-master]
localhost

[secondary-masters]
localhost

[masters]
localhost

[minions]
localhost

[nginx]
localhost

[nfs-server]
localhost
EOF

  cat <<EOF >  /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
EOF
  sysctl --system
  
  echo 'export GOPATH=$HOME/.go' >> .bashrc
  echo 'export PATH=${GOPATH//://bin:}/bin:$PATH' >> .bashrc
  
  echo ip_vs >> /etc/modules
  echo ip_vs_wrr >> /etc/modules
  echo ip_vs_sh >> /etc/modules
  echo ip_vs_rr >> /etc/modules
# end indent breaks
}

install_pips () {
  sudo -H pip install --upgrade pip
  sudo -H pip install --upgrade jinja2-cli jinja2 ceph-deploy
  sudo -H pip install --upgrade 'docker<3.0'
}

install_docker_compose () {
  sudo curl -L "https://github.com/docker/compose/releases/download/1.24.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
  sudo chmod +x /usr/local/bin/docker-compose
  sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
}

install_default_docker () {
  apt-get install -yqq --allow-downgrades \
   docker-ce=$(apt-cache madison docker-ce | grep $DOCKER_PKG | head -1 | awk '{print $3}') \
   docker-compose=$(apt-cache madison docker-compose | grep $DOCKER_COMPOSE_PKG | head -1 | awk '{print $3}') \
   kubelet kubeadm kubectl

  systemctl enable docker && systemctl start docker
  systemctl enable kubelet && systemctl start kubelet

  sudo rm -Rf /home/vagrant/.cache
  install_pips

  #edit /etc/sysconfig/docker file and add --insecure-registry 172.30.0.0/16 to the OPTIONS parameter.
  #sed -i '/OPTIONS=.*/c\OPTIONS="--selinux-enabled --insecure-registry 172.30.0.0/16"' \
  # /etc/sysconfig/docker
}

install_default_docker () {
  apt-get -yqq install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
}


install_spec_docker () {
  apt-get install -yqq --allow-downgrades \
  docker-ce=$(apt-cache madison docker-ce | grep $DOCKER_PKG | head -1 | awk '{print $3}') \
  kubelet=$(apt-cache madison kubelet | grep $KUBEPKG_VERSION | head -1 | awk '{print $3}') \
  kubeadm=$(apt-cache madison kubeadm | grep $KUBEPKG_VERSION | head -1 | awk '{print $3}') \
  kubectl=$(apt-cache madison kubectl | grep $KUBEPKG_VERSION | head -1 | awk '{print $3}')

  install_docker_compose

  rm -fv /etc/containerd/config.toml
  systemctl daemon-reload
  systemctl restart containerd
  systemctl enable docker && systemctl start docker
  systemctl enable kubelet && systemctl start kubelet

  install_pips
}

install_kubernetes_crio () {
  modprobe overlay
  modprobe br_netfilter

# Set up required sysctl params, these persist across reboots.
cat > /etc/sysctl.d/99-kubernetes-cri.conf <<EOF
net.bridge.bridge-nf-call-iptables  = 1
net.ipv4.ip_forward                 = 1
net.bridge.bridge-nf-call-ip6tables = 1
EOF

  sysctl --system


  # Install CRI-O
  # https://github.com/cri-o/cri-o/blob/main/install.md#install-packaged-versions-of-cri-o
  export OS=Debian_12
  export VERSION=$KUBEPKG_VERSION
  echo "deb [signed-by=/usr/share/keyrings/libcontainers-archive-keyring.gpg] https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/$OS/ /" > /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list
  echo "deb [signed-by=/usr/share/keyrings/libcontainers-crio-archive-keyring.gpg] https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/$VERSION/$OS/ /" > /etc/apt/sources.list.d/devel:kubic:libcontainers:stable:cri-o:$VERSION.list

  mkdir -p /usr/share/keyrings
  curl -L https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/$OS/Release.key | gpg --dearmor -o /usr/share/keyrings/libcontainers-archive-keyring.gpg
  curl -L https://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable:/cri-o:/$VERSION/$OS/Release.key | gpg --dearmor -o /usr/share/keyrings/libcontainers-crio-archive-keyring.gpg

  apt-get update
  apt-get install -yqq cri-o cri-o-runc

  rm -fv /etc/containerd/config.toml
  systemctl daemon-reload
  systemctl restart containerd
  systemctl enable --now crio
}

install_zabbix_agent () {

  # Configure package repository
  if [ "$NAME" = 'Ubuntu' ]; then
    wget https://repo.zabbix.com/zabbix/5.0/ubuntu/pool/main/z/zabbix-release/zabbix-release_5.0-1%2B${UBUNTU_CODENAME}_all.deb 
    sudo dpkg -i zabbix-release_5.0-1+${UBUNTU_CODENAME}_all.deb
  elif [ "$NAME" = 'Debian' ]; then
    if [ "$VERSION_CODENAME" = 'buster' ]; then
      echo 'deb http://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/Debian_10/ /' > /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list
    else
      echo 'debian version unsupported'
      exit 1
    fi
  fi

  sudo apt update
  sudo apt -yqq install zabbix-agent
  #sudo systemctl enable zabbix-agent
}

get_cni () {
  mkdir -p /opt/cni/bin
  curl -O -L https://github.com/containernetworking/plugins/releases/download/v1.2.0/cni-plugins-linux-amd64-v1.2.0.tgz
  tar -C /opt/cni/bin -xzf cni-plugins-linux-amd64-v1.2.0.tgz
}

common_kube_install () {
  apt-get install -yqq --allow-downgrades \
  kubelet=$(apt-cache madison kubelet | grep $KUBEPKG_VERSION | head -1 | awk '{print $3}') \
  kubeadm=$(apt-cache madison kubeadm | grep $KUBEPKG_VERSION | head -1 | awk '{print $3}') \
  kubectl=$(apt-cache madison kubectl | grep $KUBEPKG_VERSION | head -1 | awk '{print $3}')

  mkdir -p /etc/docker
  # Setup daemon.
  cat > /etc/docker/daemon.json <<EOF
{
  "exec-opts": ["native.cgroupdriver=$DOCKER_CGROUP_DRIVER"],
  "log-driver": "json-file",
  "log-opts": {
    "max-size": "100m"
  },
  "storage-driver": "overlay2"
}
EOF

  mkdir -p /etc/systemd/system/docker.service.d

  install_pips

  # Restart docker.
  rm -fv /etc/containerd/config.toml
  systemctl daemon-reload
  systemctl restart containerd
  systemctl enable docker && systemctl restart docker
  systemctl enable kubelet && systemctl restart kubelet
  crictl config runtime-endpoint unix:///var/run/containerd/containerd.sock
}

install_kubernetes_docker () {
  prep_kubernetes_key
  get_cni
  official_docker_install
  common_kube_install
}

install_kubernetes_wo_docker () {
  prep_kubernetes_key
  get_cni
  install_kubernetes_crio
  common_kube_install
}

mkshowipaddress () {
  ## Show IP address in /etc/issue
    cat << EOF > /usr/local/bin/get-ip-address
#!/bin/bash
echo -n 'IP address = '
/sbin/ip a | grep "inet" | grep -v "inet6 ::1" | grep -v "inet 127.0.0.1" | awk '{ print \$2 }'
echo -n 'SSH is on port: '
grep Port /etc/ssh/sshd_config
EOF

  chmod +x /usr/local/bin/get-ip-address

  cat << EOF > /etc/network/if-up.d/show-ip-address
#!/bin/sh
if [ -f /etc/issue-standard ]; then
cp /etc/issue-standard /etc/issue
echo 'issue-standard found' >> /etc/issue
fi

# Warn if run from loopback
if [ "\$METHOD" = loopback ]; then
echo 'WARNING: running from loopback' >> /etc/issue
#exit 0
fi

# Warn if not run from ifup.
if [ "\$MODE" != start ]; then
echo 'WARNING: not running from ifup' >> /etc/issue
#exit 0
fi

/usr/local/bin/get-ip-address >> /etc/issue
echo "" >> /etc/issue
EOF

  chmod +x /etc/network/if-up.d/show-ip-address
}

official_docker_install () {
  set +e
  for pkg in docker.io docker-doc docker-compose podman-docker containerd runc; do sudo apt-get -yqq remove $pkg; done
  set -e
  sudo apt-get -yqq install ca-certificates curl gnupg
  sudo install -m 0755 -d /etc/apt/keyrings
  curl -fsSL https://download.docker.com/linux/debian/gpg | sudo gpg --dearmor -o /etc/apt/keyrings/docker.gpg
  sudo chmod a+r /etc/apt/keyrings/docker.gpg
  
  # Add the repository to Apt sources:
  echo \
    "deb [arch="$(dpkg --print-architecture)" signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/debian \
    "$(. /etc/os-release && echo "$VERSION_CODENAME")" stable" | \
    sudo tee /etc/apt/sources.list.d/docker.list > /dev/null
  apt-get update
  apt-get -yqq install docker-ce docker-ce-cli containerd.io docker-buildx-plugin docker-compose-plugin
  containerd_config
  apt-mark hold docker-ce
  systemctl restart docker
  systemctl restart containerd
  docker version
}

prep_kubernetes_key () {
  # https://kubernetes.io/docs/setup/production-environment/tools/kubeadm/install-kubeadm/
  sudo mkdir -m 755 /etc/apt/keyrings
  curl -fsSL https://pkgs.k8s.io/core:/stable:/v${SHORT_KUBEPKG_VERSION}/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
  echo "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v${SHORT_KUBEPKG_VERSION}/deb/ /" | sudo tee /etc/apt/sources.list.d/kubernetes.list
}

additional_packages_install () {
  if [ "$ADDITIONAL_DEB_PACKAGES_TO_INSTALL" != "NIL" ]; then
    echo -n "$ADDITIONAL_DEB_PACKAGES_TO_INSTALL - " >> /root/.additional_packages_isntalled
    date -I >> /root/.additional_packages_isntalled
    echo "apt-get install -y $ADDITIONAL_DEB_PACKAGES_TO_INSTALL" >> /root/.additional_packages_isntalled
    apt-get install -y $ADDITIONAL_DEB_PACKAGES_TO_INSTALL
  else
    echo -n "$ADDITIONAL_DEB_PACKAGES_TO_INSTALL - " >> /root/.additional_packages_isntalled
  fi
  #printf 'DOCKER_OPTS="${DOCKER_OPTS} --registry-mirror=%s"' $K8S_REGISTRY_MIRROR >> /etc/default/docker
}

go_installer () {
  # test snap
  if ! test_cmd_loc="$(type -p "snap")" || [ -z "$test_cmd_loc" ]; then
    echo "snap was not found in your path! skipping"
    apt-get install -yqq golang
  else
    snap install --classic go
  fi
  export GOPATH=$HOME/.go
}

turn_off_swap () {
  swapoff --all
  sed -i.bak -r 's/(.+ swap .+)/#\1/' /etc/fstab
}

pre_packages_install () {
  # for ES
  set +e
  echo 'vm.max_map_count=262144'|sudo tee -a /etc/sysctl.d/vm.conf
  ls -alh /etc/sysctl.d/vm.conf
  sed -i 's/ENABLED="false"/ENABLED="true"/' /etc/default/sysstat
  cat /etc/default/sysstat
  set -e

  apt-get update
  apt-get install -yqq \
  $DEB_PRE_PACKAGES_TO_INSTALL

  # service open-iscsi restart
  systemctl enable iscsid
}

packages_install () {
  apt-get update
  apt-get install -yqq \
  $DEB_PACKAGES_TO_INSTALL

  echo 'PATH=/usr/local/bin:$PATH' >> /root/.bash_profile
  echo 'PATH=/usr/local/bin:$PATH' >> /root/.zshrc
}

chooser () {
  if [ "$KUBEADM_INSTALL" = "openshift" ]; then
    # leaving clean for now, let ansible initialize
    #yum install -y centos-release-openshift-origin origin-clients
    echo 'Sticking to defaults for openshift'
    #install_default_docker
    install_kubernetes_docker
  elif [ "$KUBEADM_INSTALL" = "kubespray" ]; then
    # leaving clean for now, let ansible initialize
    echo 'Sticking to defaults for kubespray'
    #install_default_docker
  elif [ "$KUBEADM_INSTALL" = "nomad" ]; then
    # Installing nomad
    install_kubernetes_docker
		curl -fsSL https://apt.releases.hashicorp.com/gpg | sudo apt-key add -
		sudo apt-add-repository "deb [arch=amd64] https://apt.releases.hashicorp.com $(lsb_release -cs) main"
		sudo apt-get -yqq update && sudo apt-get install -yqq nomad
  elif [ "$KUBEADM_INSTALL" = "kubeadm2ha" ]; then
    #install_spec_docker
    install_kubernetes_docker
    cd $TMP
    git clone --depth=1 https://github.com/joshuacox/kubeadm2ha.git
    cd kubeadm2ha/ansible
    ansible-playbook -i $TMP/inventory cluster-images.yaml
  elif [ "$KUBEADM_INSTALL" = "kubeadm" ]; then
    #install_spec_docker
    install_kubernetes_docker
    kubeadm config images pull
    #kubeadm init
    #yes y|kubeadm reset
    rm -Rf /etc/kubernetes/*
  elif [ "$KUBEADM_INSTALL" = "spec" ]; then
    install_spec_docker
    kubeadm config images pull
    #kubeadm init
    #yes y|kubeadm reset
    rm -Rf /etc/kubernetes/*
  else
    echo 'Sticking to defaults'
    # install_default_docker
    install_kubernetes_docker
    kubeadm config images pull
    #kubeadm init
    #yes y|kubeadm reset
    rm -Rf /etc/kubernetes/*
  fi
}

setup_registry () {
  # Registry mirror
  # https://circleci.com/docs/2.0/docker-hub-pull-through-mirror/
  # https://docs.docker.com/registry/recipes/mirror/
  if [ -z $K8S_REGISTRY_MIRROR_HUB ]; then
    echo 'The current registry_mirror is NOT SET!'
  : ${K8S_REGISTRY_MIRROR_HUB:=NULL_AND_VOID}
  else
    printf 'The current registry_mirror is %s' $K8S_REGISTRY_MIRROR_HUB
  fi
  printf 'The registry_mirror is now set to %s' $K8S_REGISTRY_MIRROR_HUB

  if [ "$K8S_REGISTRY_MIRROR_HUB" = "NULL_AND_VOID" ]; then
    echo 'No registry set, using defaults'
  else
    if [ ! -z "$K8S_REGISTRY_MIRROR_HUB" ]; then
      daemon_string="\"$K8S_REGISTRY_MIRROR_HUB\""
      mkdir -p /etc/systemd/system/docker.service.d
      mkdir -p /etc/systemd/system/containerd.service.d

cat << EOD > /etc/systemd/system/docker.service.d/http-proxy.conf
[Service]
Environment="HTTP_PROXY=$K8S_REGISTRY_MIRROR_HUB"
Environment="HTTPS_PROXY=$K8S_REGISTRY_MIRROR_HUB"
EOD

cat << EOD > /etc/systemd/system/containerd.service.d/http-proxy.conf
[Service]
Environment="HTTP_PROXY=$K8S_REGISTRY_MIRROR_HUB"
Environment="HTTPS_PROXY=$K8S_REGISTRY_MIRROR_HUB"
EOD

			curl $K8S_REGISTRY_MIRROR_HUB/ca.crt > /usr/share/ca-certificates/docker_registry_proxy.crt
			echo "docker_registry_proxy.crt" >> /etc/ca-certificates.conf
			update-ca-certificates --fresh
      rm -fv /etc/containerd/config.toml
			systemctl daemon-reload
      systemctl restart containerd
			systemctl restart docker.service

    fi
    if [ ! -z "$K8S_REGISTRY_MIRROR_QUAY" ]; then
      daemon_string="$daemon_string, \"$K8S_REGISTRY_MIRROR_QUAY\""
    fi
    if [ ! -z "$K8S_REGISTRY_MIRROR_GRC" ]; then
      daemon_string="$daemon_string, \"$K8S_REGISTRY_MIRROR_GRC\""
    fi
    if [ ! -z "$K8S_REGISTRY_MIRROR_K8S" ]; then
      daemon_string="$daemon_string, \"$K8S_REGISTRY_MIRROR_K8S\""
    fi
    mkdir -p /etc/docker
    #cat <<< $(jq ".\"registry-mirrors\" = [\"$K8S_REGISTRY_MIRROR\"]" /etc/docker/daemon.json) > /etc/docker/daemon.json
    #sudo bash -c 'cat <<< $(jq ".\"registry-mirrors\" = [\"http://192.0.2.1.or.https.your-mirror.example.com\"]" /etc/docker/daemon.json) > /etc/docker/daemon.json'
    daemon_json=$(jq ".\"registry-mirrors\" = [ $daemon_string ]" /etc/docker/daemon.json)
    echo "$daemon_json" > /etc/docker/daemon.json
  fi
}

main () {
  preps
  echo '>>>> PRINTENV <<<<'
  printenv
  echo '>>>> END_PRINTENV <<<<'
  rook_efficiency
  pre_packages_install
  packages_install
  go_installer 
  turn_off_swap
  chooser
  mkshowipaddress
  install_zabbix_agent
  additional_packages_install
  setup_registry
}

main $@
containerd_config
