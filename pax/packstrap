#!/bin/bash 
set -eux
TMP=$(mktemp -d)
. /etc/os-release
: ${DEB_PRE_PACKAGES_TO_INSTALL:='apt-transport-https ca-certificates curl ebtables ethtool keepalived open-iscsi tgt ntp software-properties-common'}
: ${DEB_PACKAGES_TO_INSTALL:='ceph ceph-test sysstat rsync fail2ban net-tools dnsutils python-pip vim htop iotop iftop zsh'}
# this one is for customization
: ${ADDITIONAL_DEB_PACKAGES_TO_INSTALL:='NIL'}

#: ${DOCKER_PKG:='19.03'}
: ${DOCKER_COMPOSE_PKG:='1.8.0'}
: ${KUBEPKG_VERSION:="1.19.6"}
: ${ETCD_VERSION:="3.2.17"}
: ${DOCKER_CGROUP_DRIVER:='systemd'}
#: ${DOCKER_CGROUP_DRIVER:='cgroupfs'}
echo '>>>> PRINTENV <<<<'
printenv
echo '>>>> END_PRINTENV <<<<'
if [ -z $REGISTRY_MIRROR ]; then
  echo 'The current registry_mirror is NOT SET!'
: ${REGISTRY_MIRROR:=https://registry-1.docker.io}
else
  printf 'The current registry_mirror is %s' $REGISTRY_MIRROR
fi
printf 'The registry_mirror is now set to %s' $REGISTRY_MIRROR


cat <<EOF > $TMP/inventory
localhost ansible_connection=local

[nodes]
localhost

[primary-master]
localhost

[secondary-masters]
localhost

[masters]
localhost

[minions]
localhost

[nginx]
localhost

[nfs-server]
localhost
EOF

# This is for rook efficiency
# https://rook.io/docs/rook/v0.9/edgefs-quickstart.html
cat <<EOF >  /etc/sysctl.d/rook.conf
net.core.rmem_default = 80331648
net.core.rmem_max = 80331648
net.core.wmem_default = 33554432
net.core.wmem_max = 50331648
vm.dirty_ratio = 10
vm.dirty_background_ratio = 5
vm.swappiness = 15
EOF


cat <<EOF >  /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
EOF
sysctl --system

echo 'export GOPATH=$HOME/.go
export PATH=${GOPATH//://bin:}/bin:$PATH' \
>> .bashrc

echo ip_vs >> /etc/modules
echo ip_vs_wrr >> /etc/modules
echo ip_vs_sh >> /etc/modules
echo ip_vs_rr >> /etc/modules

install_pips () {
  sudo -H pip install --upgrade pip
  sudo -H pip install --upgrade jinja2-cli jinja2 ceph-deploy
  sudo -H pip install --upgrade 'docker<3.0'
}

install_docker_compose () {
  sudo curl -L "https://github.com/docker/compose/releases/download/1.24.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
  sudo chmod +x /usr/local/bin/docker-compose
  sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
}

install_default_docker () {
  apt-get install -yqq --allow-downgrades \
   docker-ce=$(apt-cache madison docker-ce | grep $DOCKER_PKG | head -1 | awk '{print $3}') \
   docker-compose=$(apt-cache madison docker-compose | grep $DOCKER_COMPOSE_PKG | head -1 | awk '{print $3}') \
   kubelet kubeadm kubectl

  systemctl enable docker && systemctl start docker
  systemctl enable kubelet && systemctl start kubelet

  sudo rm -Rf /home/vagrant/.cache
  install_pips

  #edit /etc/sysconfig/docker file and add --insecure-registry 172.30.0.0/16 to the OPTIONS parameter.
  #sed -i '/OPTIONS=.*/c\OPTIONS="--selinux-enabled --insecure-registry 172.30.0.0/16"' \
  # /etc/sysconfig/docker
}

install_spec_docker () {
  apt-get install -yqq --allow-downgrades \
  docker-ce=$(apt-cache madison docker-ce | grep $DOCKER_PKG | head -1 | awk '{print $3}') \
  kubelet=$(apt-cache madison kubelet | grep $KUBEPKG_VERSION | head -1 | awk '{print $3}') \
  kubeadm=$(apt-cache madison kubeadm | grep $KUBEPKG_VERSION | head -1 | awk '{print $3}') \
  kubectl=$(apt-cache madison kubectl | grep $KUBEPKG_VERSION | head -1 | awk '{print $3}')

  install_docker_compose

  systemctl enable docker && systemctl start docker
  systemctl enable kubelet && systemctl start kubelet

  install_pips
}

install_kubernetes_crio () {
  modprobe overlay
  modprobe br_netfilter

# Set up required sysctl params, these persist across reboots.
cat > /etc/sysctl.d/99-kubernetes-cri.conf <<EOF
net.bridge.bridge-nf-call-iptables  = 1
net.ipv4.ip_forward                 = 1
net.bridge.bridge-nf-call-ip6tables = 1
EOF

  sysctl --system

  # Configure package repository
  if [[ $NAME == 'Ubuntu' ]]; then
    sudo sh -c "echo 'deb http://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/x${NAME}_${VERSION_ID}/ /' > /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list"
    wget -nv https://download.opensuse.org/repositories/devel:kubic:libcontainers:stable/x${NAME}_${VERSION_ID}/Release.key -O- | sudo apt-key add -
  elif [[ $NAME == 'Debian' ]]; then
    echo 'deb http://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/Debian_10/ /' > /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list
    wget -nv https://download.opensuse.org/repositories/devel:kubic:libcontainers:stable/Debian_10/Release.key -O- | sudo apt-key add -
  fi
  sudo apt-get update
  # Install CRI-O
  sudo apt-get -y install cri-o-1.17

  systemctl daemon-reload
  systemctl enable --now crio
}

install_zabbix_agent () {

  # Configure package repository
  if [[ $NAME == 'Ubuntu' ]]; then
    wget https://repo.zabbix.com/zabbix/5.0/ubuntu/pool/main/z/zabbix-release/zabbix-release_5.0-1%2B${UBUNTU_CODENAME}_all.deb 
    sudo dpkg -i zabbix-release_5.0-1+${UBUNTU_CODENAME}_all.deb
  elif [[ $NAME == 'Debian' ]]; then
    if [[ $VERSION_CODENAME == 'buster' ]]; then
      echo 'deb http://download.opensuse.org/repositories/devel:/kubic:/libcontainers:/stable/Debian_10/ /' > /etc/apt/sources.list.d/devel:kubic:libcontainers:stable.list
    else
      echo 'debian version unsupported'
      exit 1
    fi
  fi

  sudo apt update
  sudo apt -yqq install zabbix-agent
  #sudo systemctl enable zabbix-agent
}

install_kubernetes_docker () {
  # Follows the official install guide for ubuntu
  # https://kubernetes.io/docs/setup/production-environment/container-runtimes/
  # Install Docker CE
  ## Set up the repository:
  ### Install packages to allow apt to use a repository over HTTPS
  apt-get update && apt-get install -y \
      apt-transport-https ca-certificates curl software-properties-common gnupg2

  ### Add Dockerâ€™s official GPG key
  curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -

  ### Add Docker apt repository.
  add-apt-repository \
    "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
    $(lsb_release -cs) \
    stable"

  # Install Docker CE
  apt-get update && apt-get install -y \
      containerd.io=1.2.13-2 \
      docker-ce=5:19.03.11~3-0~ubuntu-$(lsb_release -cs) \
      docker-ce-cli=5:19.03.11~3-0~ubuntu-$(lsb_release -cs)

  # going with above temporarily
  #docker-ce=$(apt-cache madison docker-ce | grep $DOCKER_PKG | head -1 | awk '{print $3}') \

  apt-get install -yqq --allow-downgrades \
  kubelet=$(apt-cache madison kubelet | grep $KUBEPKG_VERSION | head -1 | awk '{print $3}') \
  kubeadm=$(apt-cache madison kubeadm | grep $KUBEPKG_VERSION | head -1 | awk '{print $3}') \
  kubectl=$(apt-cache madison kubectl | grep $KUBEPKG_VERSION | head -1 | awk '{print $3}')

  # Setup daemon.
  cat > /etc/docker/daemon.json <<EOF
{
  "exec-opts": ["native.cgroupdriver=$DOCKER_CGROUP_DRIVER"],
  "log-driver": "json-file",
  "log-opts": {
    "max-size": "100m"
  },
  "storage-driver": "overlay2"
}
EOF

  mkdir -p /etc/systemd/system/docker.service.d


  install_docker_compose
  install_pips

  # Restart docker.
  systemctl daemon-reload
  systemctl enable docker && systemctl restart docker
  systemctl enable kubelet && systemctl restart kubelet
}

mkshowipaddress () {
  ## Show IP address in /etc/issue
  if [[ $UBUNTU_CODENAME == 'xenial' ]]; then
  cat << EOF > /usr/local/bin/get-ip-address
    #!/bin/bash
    echo -n 'IP address = '
    /sbin/ifconfig | grep "inet addr" | grep -v "127.0.0.1" | awk '{ print \$2 }' | awk -F: '{ print \$2 }'
    echo -n 'SSH is on port: '
    grep Port /etc/ssh/sshd_config
EOF
  else
    cat << EOF > /usr/local/bin/get-ip-address
    #!/bin/bash
    echo -n 'IP address = '
    /sbin/ifconfig | grep "inet" | grep -v "inet6 ::1" | grep -v "inet 127.0.0.1" | awk '{ print \$2 }'
    echo -n 'SSH is on port: '
    grep Port /etc/ssh/sshd_config
EOF
  fi

  chmod +x /usr/local/bin/get-ip-address

  cat << EOF > /etc/network/if-up.d/show-ip-address
  #!/bin/sh
  if [ "\$METHOD" = loopback ]; then
      exit 0
  fi

  # Only run from ifup.
  if [ "\$MODE" != start ]; then
      exit 0
  fi

  cp /etc/issue-standard /etc/issue
  /usr/local/bin/get-ip-address >> /etc/issue
  echo "" >> /etc/issue
EOF

  chmod +x /etc/network/if-up.d/show-ip-address
}

main () {
  apt-get update
  apt-get install -yqq \
  $DEB_PRE_PACKAGES_TO_INSTALL
  curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
  add-apt-repository \
     "deb https://download.docker.com/linux/$(. /etc/os-release; echo "$ID") \
     $(lsb_release -cs) \
     stable"
  curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
  cat <<EOF >/etc/apt/sources.list.d/kubernetes.list
  deb http://apt.kubernetes.io/ kubernetes-xenial main
EOF
  apt-get update
  apt-get install -yqq \
  $DEB_PACKAGES_TO_INSTALL

  sed -i 's/ENABLED="false"/ENABLED="true"/' /etc/default/sysstat

  # test snap
  if ! test_cmd_loc="$(type -p "snap")" || [ -z "$test_cmd_loc" ]; then
    echo "snap was not found in your path! skipping"
    apt-get install -yqq golang
  else
    snap install --classic go
  fi
  export GOPATH=$HOME/.go
  #go get github.com/kubernetes-incubator/cri-tools/cmd/crictl
  #mv $HOME/go/bin/crictl /usr/local/bin/
  swapoff --all
  sed -i.bak -r 's/(.+ swap .+)/#\1/' /etc/fstab

  if [ "$KUBEADM_INSTALL" = "openshift" ]; then
    # leaving clean for now, let ansible initialize
    #yum install -y centos-release-openshift-origin origin-clients
    echo 'Sticking to defaults for openshift'
    #install_default_docker
    install_kubernetes_docker
  elif [ "$KUBEADM_INSTALL" = "kubespray" ]; then
    # leaving clean for now, let ansible initialize
    echo 'Sticking to defaults for kubespray'
    #install_default_docker
  elif [ "$KUBEADM_INSTALL" = "kubeadm2ha" ]; then
    #install_spec_docker
    install_kubernetes_docker
    cd $TMP
    git clone --depth=1 https://github.com/joshuacox/kubeadm2ha.git
    cd kubeadm2ha/ansible
    ansible-playbook -i $TMP/inventory cluster-images.yaml
  elif [ "$KUBEADM_INSTALL" = "kubeadm" ]; then
    #install_spec_docker
    install_kubernetes_docker
    kubeadm config images pull
    #kubeadm init
    #yes y|kubeadm reset
    rm -Rf /etc/kubernetes/*
  elif [ "$KUBEADM_INSTALL" = "spec" ]; then
    install_spec_docker
    kubeadm config images pull
    #kubeadm init
    #yes y|kubeadm reset
    rm -Rf /etc/kubernetes/*
  else
    echo 'Sticking to defaults'
    # install_default_docker
    install_kubernetes_docker
    kubeadm config images pull
    #kubeadm init
    #yes y|kubeadm reset
    rm -Rf /etc/kubernetes/*
  fi

  apt-mark hold docker-ce
  # service open-iscsi restart
  systemctl enable iscsid
  systemctl restart docker

  mkshowipaddress

  echo 'PATH=/usr/local/bin:$PATH' >> /root/.bash_profile
  echo 'PATH=/usr/local/bin:$PATH' >> /root/.zshrc
  docker version

  install_zabbix_agent
  if [ "$ADDITIONAL_DEB_PACKAGES_TO_INSTALL" != "NIL" ]; then
    echo -n "$ADDITIONAL_DEB_PACKAGES_TO_INSTALL - " >> /root/.additional_packages_isntalled
    date -I >> /root/.additional_packages_isntalled
    echo "apt-get install -y $ADDITIONAL_DEB_PACKAGES_TO_INSTALL" >> /root/.additional_packages_isntalled
    apt-get install -y $ADDITIONAL_DEB_PACKAGES_TO_INSTALL
  else
    echo -n "$ADDITIONAL_DEB_PACKAGES_TO_INSTALL - " >> /root/.additional_packages_isntalled
  fi
  printf 'DOCKER_OPTS="${DOCKER_OPTS} --registry-mirror=%s"' $REGISTRY_MIRROR >> /etc/default/docker
}

main $@
