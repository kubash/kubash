#!/bin/sh -eux
TMP=$(mktemp -d)
: ${DEB_PRE_PACKAGES_TO_INSTALL:='apt-transport-https ca-certificates curl ebtables ethtool keepalived open-iscsi ntp software-properties-common'}
: ${DEB_PACKAGES_TO_INSTALL:='sysstat rsync fail2ban net-tools dnsutils python-pip vim htop iotop iftop zsh'}

: ${DOCKER_PKG:='17.03'}
: ${DOCKER_COMPOSE_PKG:='1.8.0'}
: ${KUBEPKG_VERSION:="1.9.3"}
: ${ETCD_VERSION:="3.2.17"}

cat <<EOF > $TMP/inventory
localhost ansible_connection=local

[nodes]
localhost

[primary-master]
localhost

[secondary-masters]
localhost

[masters]
localhost

[minions]
localhost

[nginx]
localhost

[nfs-server]
localhost
EOF

cat <<EOF >  /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
EOF
sysctl --system

echo 'export GOPATH=$HOME/.go
export PATH=${GOPATH//://bin:}/bin:$PATH' \
>> .bashrc

echo ip_vs >> /etc/modules
echo ip_vs_wrr >> /etc/modules
echo ip_vs_sh >> /etc/modules
echo ip_vs_rr >> /etc/modules

install_pips () {
  sudo -H pip install --upgrade pip
  sudo -H pip install --upgrade jinja2-cli jinja2
  sudo -H pip install --upgrade 'docker<3.0'
}

install_default_docker () {
  apt-get install -yqq --allow-downgrades \
   docker-ce=$(apt-cache madison docker-ce | grep $DOCKER_PKG | head -1 | awk '{print $3}') \
   docker-compose=$(apt-cache madison docker-compose | grep $DOCKER_COMPOSE_PKG | head -1 | awk '{print $3}') \
   kubelet kubeadm kubectl

  systemctl enable docker && systemctl start docker
  systemctl enable kubelet && systemctl start kubelet

  sudo rm -Rf /home/vagrant/.cache
  install_pips

  #edit /etc/sysconfig/docker file and add --insecure-registry 172.30.0.0/16 to the OPTIONS parameter.
  #sed -i '/OPTIONS=.*/c\OPTIONS="--selinux-enabled --insecure-registry 172.30.0.0/16"' \
  # /etc/sysconfig/docker
}

install_spec_docker () {
  apt-get install -yqq --allow-downgrades \
   docker-ce=$(apt-cache madison docker-ce | grep $DOCKER_PKG | head -1 | awk '{print $3}') \
   docker-compose=$(apt-cache madison docker-compose | grep $DOCKER_COMPOSE_PKG | head -1 | awk '{print $3}') \
   kubelet=$(apt-cache madison kubelet | grep $KUBEPKG_VERSION | head -1 | awk '{print $3}') \
   kubeadm=$(apt-cache madison kubeadm | grep $KUBEPKG_VERSION | head -1 | awk '{print $3}') \
   kubectl=$(apt-cache madison kubectl | grep $KUBEPKG_VERSION | head -1 | awk '{print $3}')

  systemctl enable docker && systemctl start docker
  systemctl enable kubelet && systemctl start kubelet

  install_pips
}

apt-get update
apt-get install -yqq \
$DEB_PRE_PACKAGES_TO_INSTALL
curl -fsSL https://download.docker.com/linux/ubuntu/gpg | apt-key add -
add-apt-repository \
   "deb https://download.docker.com/linux/$(. /etc/os-release; echo "$ID") \
   $(lsb_release -cs) \
   stable"
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -
cat <<EOF >/etc/apt/sources.list.d/kubernetes.list
deb http://apt.kubernetes.io/ kubernetes-xenial main
EOF
apt-get update
apt-get install -yqq \
$DEB_PACKAGES_TO_INSTALL

sed -i 's/ENABLED="false"/ENABLED="true"/' /etc/default/sysstat

# test snap
if ! test_cmd_loc="$(type -p "snap")" || [ -z "$test_cmd_loc" ]; then
  echo "snap was not found in your path! skipping"
  apt-get install -yqq golang
else
  snap install --classic go
fi
export GOPATH=$HOME/.go
#go get github.com/kubernetes-incubator/cri-tools/cmd/crictl
#mv $HOME/go/bin/crictl /usr/local/bin/
swapoff --all
sed -i.bak -r 's/(.+ swap .+)/#\1/' /etc/fstab

if [ "$KUBEADM_INSTALL" = "openshift" ]; then
  # leaving clean for now, let ansible initialize
  #yum install -y centos-release-openshift-origin origin-clients
  echo 'Sticking to defaults for openshift'
  install_default_docker
elif [ "$KUBEADM_INSTALL" = "kubespray" ]; then
  # leaving clean for now, let ansible initialize
  echo 'Sticking to defaults for kubespray'
  #install_default_docker
elif [ "$KUBEADM_INSTALL" = "kubeadm2ha" ]; then
  install_spec_docker
  cd $TMP
  git clone --depth=1 https://github.com/joshuacox/kubeadm2ha.git
  cd kubeadm2ha/ansible
  ansible-playbook -i $TMP/inventory cluster-images.yaml
elif [ "$KUBEADM_INSTALL" = "kubeadm" ]; then
  install_spec_docker
  #kubeadm config images pull
  kubeadm init
  yes y|kubeadm reset
  rm -Rf /etc/kubernetes/*
else
  echo 'Sticking to defaults'
  install_default_docker
fi

apt-mark hold docker-ce
service open-iscsi restart
systemctl restart docker

## Show IP address in /etc/issue
cat << EOF > /usr/local/bin/get-ip-address
#!/bin/bash
echo -n 'IP address = '
/sbin/ifconfig | grep "inet addr" | grep -v "127.0.0.1" | awk '{ print \$2 }' | awk -F: '{ print \$2 }'
echo -n 'SSH is on port: '
grep Port /etc/ssh/sshd_config
EOF

chmod +x /usr/local/bin/get-ip-address

cat << EOF > /etc/network/if-up.d/show-ip-address
#!/bin/sh
if [ "\$METHOD" = loopback ]; then
    exit 0
fi

# Only run from ifup.
if [ "\$MODE" != start ]; then
    exit 0
fi

cp /etc/issue-standard /etc/issue
/usr/local/bin/get-ip-address >> /etc/issue
echo "" >> /etc/issue
EOF

chmod +x /etc/network/if-up.d/show-ip-address

echo 'PATH=/usr/local/bin:$PATH' >> /root/.bash_profile
echo 'PATH=/usr/local/bin:$PATH' >> /root/.zshrc
docker version
