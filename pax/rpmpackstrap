#!/bin/sh -eux
# https://docs.docker.com/install/linux/docker-ce/centos/
# https://github.com/cookeem/kubeadm-ha
TMP=$(mktemp -d)
: ${PRE_INSTALL_PKGS:='epel-release'}
: ${ADDITIONAL_INSTALL_PKGS:=' '}
: ${DOCKER_PKG:='18.06.2.ce-3'}
: ${DOCKER_PKG_NAME:="docker-ce-${DOCKER_PKG}"}
: ${KUBEPKG_VERSION:="1.15.3"}
: ${ETCD_VERSION:="3.2.22"}
: ${KUBELET_PKG:="kubelet-$KUBEPKG_VERSION"}
: ${KUBEADM_PKG:="kubeadm-$KUBEPKG_VERSION"}
: ${KUBECTL_PKG:="kubectl-$KUBEPKG_VERSION"}
: ${ETCD_PKG:="etcd-$ETCD_VERSION"}
#: ${DOCKER_CGROUP_DRIVER:='systemd'}
: ${DOCKER_CGROUP_DRIVER:='cgroupfs'}
: ${CEPH_RELEASE:="luminous"}
. /etc/os-release

if [[ "$PRETTY_NAME" == "CentOS Linux 7 (Core)" ]]; then
: ${INSTALL_PKGS:='zsh sysstat fail2ban unzip device-mapper-persistent-data lvm2 golang ebtables ethtool keepalived ntp rsync ansible socat python python-pip wget git net-tools bind-utils iptables-services bridge-utils bash-completion kexec-tools sos psacct iscsi-initiator-utils scsi-target-utils yum-utils'}
elif [[ "$PRETTY_NAME" == "CentOS Linux 8 (Core)" ]]; then
  # https://www.tecmint.com/create-network-bridge-in-rhel-centos-8/
: ${INSTALL_PKGS:='zsh sysstat fail2ban unzip device-mapper-persistent-data lvm2 golang ebtables ethtool keepalived chrony rsync ansible socat python2-pip python3-pip wget git net-tools bind-utils iptables-services bash-completion kexec-tools sos psacct iscsi-initiator-utils yum-utils'}
fi

cd $TMP
cat <<EOF > $TMP/inventory
localhost ansible_connection=local

[nodes]
localhost

[primary-master]
localhost

[secondary-masters]
localhost

[masters]
localhost

[minions]
localhost

[nginx]
localhost

[nfs-server]
localhost
EOF

# Add modules ip_vs ip_vs_rr ip_vs_wrr ip_vs_sh
echo ip_vs >> /etc/modules
echo ip_vs_rr >> /etc/modules
echo ip_vs_wrr >> /etc/modules
echo ip_vs_sh >> /etc/modules

# This is for rook efficiency
# https://rook.io/docs/rook/v0.9/edgefs-quickstart.html
cat <<EOF >  /etc/sysctl.d/rook.conf
net.core.rmem_default = 80331648
net.core.rmem_max = 80331648
net.core.wmem_default = 33554432
net.core.wmem_max = 50331648
vm.dirty_ratio = 10
vm.dirty_background_ratio = 5
vm.swappiness = 15
EOF

cat <<EOF >  /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
EOF
sysctl --system
iptables -F
iptables-save

if [[ "$PRETTY_NAME" == "CentOS Linux 7 (Core)" ]]; then
  wget https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
  yum install -y epel-release-latest-7.noarch.rpm
elif [[ "$PRETTY_NAME" == "CentOS Linux 8 (Core)" ]]; then
  wget https://dl.fedoraproject.org/pub/epel/epel-release-latest-8.noarch.rpm
  yum install -y epel-release-latest-8.noarch.rpm
fi

yum clean all
yum update -y
yum repolist enabled

yum install -y $PRE_INSTALL_PKGS
yum update -y
yum install -y $INSTALL_PKGS $ADDITIONAL_INSTALL_PKGS

systemctl enable sysstat.service

swapoff --all
sed -i.bak -r 's/(.+ swap .+)/#\1/' /etc/fstab

cat <<EOF > /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
EOF
setenforce 0

install_default_docker () {
  yum install -y docker
  systemctl enable docker && systemctl start docker

  systemctl enable docker && systemctl start docker
  systemctl enable kubelet && systemctl start kubelet

  pip install --upgrade pip
  pip install --upgrade jinja2-cli jinja2 ceph-deploy
  pip install --upgrade 'docker<3.0'

  #edit /etc/sysconfig/docker file and add --insecure-registry 172.30.0.0/16 to the OPTIONS parameter.
  sed -i '/OPTIONS=.*/c\OPTIONS="--selinux-enabled --insecure-registry 172.30.0.0/16"' \
   /etc/sysconfig/docker
}

install_ceph () {
  if [[ "$PRETTY_NAME" == "CentOS Linux 7 (Core)" ]]; then
    sudo yum install -y https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
    cat << EOM > /etc/yum.repos.d/ceph.repo
[ceph-noarch]
name=Ceph noarch packages
baseurl=https://download.ceph.com/rpm-$CEPH_RELEASE/el7/noarch
enabled=1
gpgcheck=1
type=rpm-md
gpgkey=https://download.ceph.com/keys/release.asc
EOM
    sudo yum update
    sudo yum install -y ceph-common
  elif [[ "$PRETTY_NAME" == "CentOS Linux 8 (Core)" ]]; then
    echo 'pass as ceph does not have a release for centos8'
  fi
}

install_spec_docker () {
  # Install docker
  sudo yum-config-manager \
    --add-repo \
    https://download.docker.com/linux/centos/docker-ce.repo
  # sudo yum-config-manager --enable docker-ce-edge
  # sudo yum-config-manager --enable docker-ce-test
  #curl -fsSL https://get.docker.com/ | sh
  #yum install docker-ce
  yum install -y $DOCKER_PKG_NAME $KUBECTL_PKG $KUBEADM_PKG $KUBELET_PKG $ETCD_PKG
  #yum install -y kubelet kubeadm kubectl
  echo "Environment='KUBELET_CGROUP_ARGS=--cgroup-driver=$DOCKER_CGROUP_DRIVER'" \
    >> /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
  #######
  install_docker_compose

  systemctl enable docker && systemctl start docker
  systemctl enable kubelet && systemctl start kubelet

  pip install --upgrade pip
  pip install --upgrade jinja2-cli jinja2
  pip install --upgrade 'docker<3.0'
}

install_kubernetes_docker () {
  # Install Docker CE
  ## Set up the repository
  ### Install required packages.
  yum install -y yum-utils device-mapper-persistent-data lvm2

  ### Add Docker repository.
  yum-config-manager \
    --add-repo \
    https://download.docker.com/linux/centos/docker-ce.repo

  # Install Docker CE
  yum update -y && yum install -y \
  containerd.io-1.2.13 \
  docker-ce-19.03.11 \
  docker-ce-cli-19.03.11

  ## Create /etc/docker directory.
  mkdir /etc/docker

  # Setup daemon.
  cat > /etc/docker/daemon.json <<EOF
{
  "exec-opts": ["native.cgroupdriver=$DOCKER_CGROUP_DRIVER"],
  "log-driver": "json-file",
  "log-opts": {
    "max-size": "100m"
  },
  "storage-driver": "overlay2",
  "storage-opts": [
    "overlay2.override_kernel_check=true"
  ]
}
EOF

  mkdir -p /etc/systemd/system/docker.service.d

  # Restart Docker
  systemctl daemon-reload
  systemctl enable --now docker
  systemctl restart docker
}

install_kube_tools () {
  cat <<EOF > /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
EOF
  
  # Set SELinux in permissive mode (effectively disabling it)
  setenforce 0
  sed -i 's/^SELINUX=enforcing$/SELINUX=permissive/' /etc/selinux/config
  
  yum install -y kubelet kubeadm kubectl --disableexcludes=kubernetes
  
  systemctl enable --now kubelet

  kubeadm config images pull
  kubeadm init
  yes y|kubeadm reset
  rm -Rf /etc/kubernetes/*
}

install_docker_compose () {
  sudo curl -L "https://github.com/docker/compose/releases/download/1.24.0/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
  sudo chmod +x /usr/local/bin/docker-compose
  sudo ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
}

echo "kubeadm install is $KUBEADM_INSTALL"

if [ "$KUBEADM_INSTALL" = "openshift" ]; then
  echo 'Sticking to default centos'
  #install_default_docker
  #yum install -y centos-release-openshift-origin origin-clients
elif [ "$KUBEADM_INSTALL" = "kubespray" ]; then
  # leaving clean for now, let ansible initialize
  echo 'Sticking to default centos'
  #install_default_docker
elif [ "$KUBEADM_INSTALL" = "kubeadm2ha" ]; then
  #install_spec_docker
  install_kubernetes_docker
  cd $TMP
  git clone --depth=1 https://github.com/joshuacox/kubeadm2ha.git
  cd kubeadm2ha/ansible
  systemctl restart docker
  ansible-playbook -i $TMP/inventory cluster-images.yaml
elif [ "$KUBEADM_INSTALL" = "kubeadm" ]; then
  #install_spec_docker
  install_kubernetes_docker
  install_kube_tools
  install_ceph
  #kubeadm config images pull
  #kubeadm init
  #yes y|kubeadm reset
  #rm -Rf /etc/kubernetes/*
else
  # Defaults to nothing barebones
  echo 'barebone'
  install_default_docker
  #install_kubernetes_docker
fi

export GOPATH=$HOME/.go
#go get github.com/kubernetes-incubator/cri-tools/cmd/crictl
#mv $HOME/go/bin/crictl /usr/local/bin/

echo 'PATH=/usr/local/bin:$PATH' >> /root/.bash_profile
echo 'PATH=/usr/local/bin:$PATH' >> /root/.zshrc

# remove temp
cd
rm -Rf $TMP
