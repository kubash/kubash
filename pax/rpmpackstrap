#!/bin/sh -eux
# https://docs.docker.com/install/linux/docker-ce/centos/
# https://github.com/cookeem/kubeadm-ha
TMP=$(mktemp -d)
: ${PRE_INSTALL_PKGS:='epel-release'}
: ${INSTALL_PKGS:='zsh sysstat fail2ban unzip device-mapper-persistent-data lvm2 golang ebtables ethtool keepalived ntp rsync ansible socat python python-pip wget git net-tools bind-utils iptables-services bridge-utils bash-completion kexec-tools sos psacct iscsi-initiator-utils yum-utils'}
: ${DOCKER_PKG:='17.12.1.ce'}
: ${DOCKER_COMPOSE_PKG:='1.18.0'}
: ${DOCKER_PKG_NAME:="docker-ce-${DOCKER_PKG}"}
: ${DOCKER_COMPOSE_PKG_NAME:="docker-compose-${DOCKER_PKG}"}
: ${KUBEPKG_VERSION:="1.13.1"}
: ${ETCD_VERSION:="3.2.22"}
: ${KUBELET_PKG:="kubelet-$KUBEPKG_VERSION"}
: ${KUBEADM_PKG:="kubeadm-$KUBEPKG_VERSION"}
: ${KUBECTL_PKG:="kubectl-$KUBEPKG_VERSION"}
: ${ETCD_PKG="etcd-$ETCD_VERSION"}

cd $TMP
cat <<EOF > $TMP/inventory
localhost ansible_connection=local

[nodes]
localhost

[primary-master]
localhost

[secondary-masters]
localhost

[masters]
localhost

[minions]
localhost

[nginx]
localhost

[nfs-server]
localhost
EOF

# Add modules ip_vs ip_vs_rr ip_vs_wrr ip_vs_sh
echo ip_vs >> /etc/modules
echo ip_vs_rr >> /etc/modules
echo ip_vs_wrr >> /etc/modules
echo ip_vs_sh >> /etc/modules

cat <<EOF >  /etc/sysctl.d/k8s.conf
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
EOF
sysctl --system
iptables -F
iptables-save

wget https://dl.fedoraproject.org/pub/epel/epel-release-latest-7.noarch.rpm
yum install -y epel-release-latest-7.noarch.rpm

yum clean all
yum update -y
yum repolist enabled

yum install -y $PRE_INSTALL_PKGS
yum install -y $INSTALL_PKGS

systemctl enable sysstat.service

swapoff --all
sed -i.bak -r 's/(.+ swap .+)/#\1/' /etc/fstab

cat <<EOF > /etc/yum.repos.d/kubernetes.repo
[kubernetes]
name=Kubernetes
baseurl=https://packages.cloud.google.com/yum/repos/kubernetes-el7-x86_64
enabled=1
gpgcheck=1
repo_gpgcheck=1
gpgkey=https://packages.cloud.google.com/yum/doc/yum-key.gpg https://packages.cloud.google.com/yum/doc/rpm-package-key.gpg
EOF
setenforce 0

install_default_docker () {
  yum install -y docker
  systemctl enable docker && systemctl start docker
  
  systemctl enable docker && systemctl start docker
  systemctl enable kubelet && systemctl start kubelet
  
  pip install --upgrade pip
  pip install --upgrade jinja2-cli jinja2
  pip install --upgrade 'docker<3.0'

  #edit /etc/sysconfig/docker file and add --insecure-registry 172.30.0.0/16 to the OPTIONS parameter.
  sed -i '/OPTIONS=.*/c\OPTIONS="--selinux-enabled --insecure-registry 172.30.0.0/16"' \
   /etc/sysconfig/docker
}

install_spec_docker () {
  # Install docker
  sudo yum-config-manager \
    --add-repo \
    https://download.docker.com/linux/centos/docker-ce.repo
  # sudo yum-config-manager --enable docker-ce-edge
  # sudo yum-config-manager --enable docker-ce-test
  #curl -fsSL https://get.docker.com/ | sh
  #yum install docker-ce
  yum install -y $DOCKER_PKG_NAME $DOCKER_COMPOSE_PKG_NAME $KUBECTL_PKG $KUBEADM_PKG $KUBELET_PKG $ETCD_PKG
  #yum install -y kubelet kubeadm kubectl
  echo 'Environment="KUBELET_CGROUP_ARGS=--cgroup-driver=cgroupfs"' \
    >> /etc/systemd/system/kubelet.service.d/10-kubeadm.conf
  #######

  systemctl enable docker && systemctl start docker
  systemctl enable kubelet && systemctl start kubelet

  pip install --upgrade pip
  pip install --upgrade jinja2-cli jinja2
  pip install --upgrade 'docker<3.0'
}

echo "kubeadm install is $KUBEADM_INSTALL"

if [ "$KUBEADM_INSTALL" = "openshift" ]; then
  echo 'Sticking to default centos'
  #install_default_docker
  #yum install -y centos-release-openshift-origin origin-clients
elif [ "$KUBEADM_INSTALL" = "kubespray" ]; then
  # leaving clean for now, let ansible initialize
  echo 'Sticking to default centos'
  #install_default_docker
elif [ "$KUBEADM_INSTALL" = "kubeadm2ha" ]; then
  install_spec_docker
  cd $TMP
  git clone --depth=1 https://github.com/joshuacox/kubeadm2ha.git
  cd kubeadm2ha/ansible
  systemctl restart docker
  ansible-playbook -i $TMP/inventory cluster-images.yaml
elif [ "$KUBEADM_INSTALL" = "kubeadm" ]; then
  install_spec_docker
  #systemctl restart docker
  #kubeadm config images pull
  kubeadm init
  yes y|kubeadm reset
  rm -Rf /etc/kubernetes/*
else
  # Defaults to nothing barebones
  echo 'barebone'
  install_default_docker
fi

export GOPATH=$HOME/.go
#go get github.com/kubernetes-incubator/cri-tools/cmd/crictl
#mv $HOME/go/bin/crictl /usr/local/bin/

echo 'PATH=/usr/local/bin:$PATH' >> /root/.bash_profile
echo 'PATH=/usr/local/bin:$PATH' >> /root/.zshrc

# remove temp
cd
rm -Rf $TMP
